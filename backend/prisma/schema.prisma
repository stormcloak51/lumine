// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "./__generated__"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PostModel {
  id Int @id @default(autoincrement())

  created_at DateTime @default(now()) @db.Timestamptz
  updated_at DateTime @updatedAt @db.Timestamptz

  content String

  User   User   @relation(fields: [userId], references: [id])
  userId String

  Like    PostLike[]
  Comment Comment[]

  @@map("posts")
}

model User {
  id       String @id @default(uuid())
  username String @unique
  email    String @unique
  password String

  name       String
  surname    String
  bio        String
  userAvatar String
  userCover  String   @default("https://firebasestorage.googleapis.com/v0/b/lumine-d6ae4.appspot.com/o/general%2Fdefault-cover.png?alt=media&token=4d474931-41b8-4f5b-b11c-1982adff3170")
  role       RoleType @default(USER)
  created_at DateTime @default(now()) @map("created_at")
  updated_at DateTime @updatedAt @map("updated_at")

  posts         PostModel[]
  likedPosts    PostLike[]
  comments      Comment[]
  likedComments CommentLike[]
  postDraft     PostDraft?

  sentRequests FriendRequest[] @relation("SentRequests")
  receivedRequests FriendRequest[] @relation("ReceivedRequests")
  friends    Friendship[] @relation("UserFriends")
  friendsOf    Friendship[] @relation("FriendsOf")

  @@map("users")
}

model Comment {
  id         Int      @id @default(autoincrement())
  content    String
  created_at DateTime @default(now()) @map("created_at")
  updated_at DateTime @updatedAt @map("updated_at")

  post   PostModel @relation(fields: [postId], references: [id])
  postId Int

  user   User   @relation(fields: [userId], references: [id])
  userId String

  Like CommentLike[]

  parentComment Comment?  @relation("SubComments", fields: [parentId], references: [id])
  parentId      Int?
  subComments   Comment[] @relation("SubComments")
}

model PostLike {
  user   User   @relation(fields: [userId], references: [id])
  userId String

  post   PostModel @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int

  @@id([userId, postId])
  @@map("PostLike")
}

model CommentLike {
  user   User   @relation(fields: [userId], references: [id])
  userId String

  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int

  created_at DateTime @default(now()) @map("created_at")

  @@id([userId, commentId])
  @@map("CommentLike")
}

model Asset {
  id   Int
  key  String     @unique
  url  String
  post PostDraft? @relation(fields: [id], references: [id])
}

model PostDraft {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  content String
  media   Asset[]

  @@map("post_draft")
}

model Token {
  id String @id @default(uuid())

  email     String
  token     String    @unique
  type      TokenType
  expiresIn DateTime  @map("expires_in")

  @@map("tokens")
}

model FriendRequest {
  id         String                  @default(cuid())
  senderId   String
  receiverId String
  status     FriendshipRequestStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sender   User @relation("SentRequests", fields: [senderId], references: [id])
  receiver User @relation("ReceivedRequests", fields: [receiverId], references: [id])

  @@unique([senderId, receiverId])
}

model Friendship {
  id        String   @id @default(cuid())
  userId    String
  friendId  String
  createdAt DateTime @default(now())

  user   User @relation("UserFriends", fields: [userId], references: [id])
  friend User @relation("FriendsOf", fields: [friendId], references: [id])

  @@unique([userId, friendId])
}

enum RoleType {
  OWNER
  ADMIN
  USER
}

enum TokenType {
  VERIFICATION
  PASSWORD_RESET
  TWO_FACTOR
}

enum FriendshipRequestStatus {
  PENDING
  DECLINED
  ACCEPTED
}
